/*
This Sudoku puzzle uses a 9 by 9 array of squares
that are organized into 3 by 3 subarrays. The puzzle solver(player) must fill in
the squares with the digits 1 to 9 such that no digit is repeated in any
row, any column, or any of the nine 3 by 3 subgroups of squares.
Initially, some squares are filled in already and cannot be changed.
***************************************************************************
Two classes: 
(1) A class "Puzzle" has the attributes:
• "board"—a 9 by 9 array of integers that represents the current state of the
puzzle, where 0 indicates a blank square
• "initialisation"OR"init"—a 9 by 9 array of boolean values that indicates which squares in
board are given values that cannot be changed
and the following methods:
• "Puzzle"—a constructor that creates an empty puzzle
• "toString"—returns a string representation of the puzzle that can be
printed
• "addValues"(row, col, value)—sets the given square to the given
value as an initial value that cannot be changed by the puzzle solver
• "addGuess"(row, col, value)—sets the given square to the given value;
the value can be changed later by another call to addGuess
• "checkPuzzle"—returns true if the values in the puzzle do not violate the
restrictions
• "getValueIn"(row, col)—returns the value in the given square
• "getAllowedValues"(row, col)—returns a one-dimensional array of
nine booleans, each of which corresponds to a digit and is true if the
digit can be placed in the given square without violating the
restrictions
• "isComplete"—returns true if every square has a value
• "reset"—changes all of the nonpermanent squares back to blanks (0s)
**************************************************************************
(2) A class "Sudoku" has the attributes:
Main method in the class "Sudoku" that creates a Puzzle
object and sets its initial configuration. Then use a loop to allow
someone to play Sudoku. 
"Display" the current configuration and ask for
a row, column, and value.
"Update" the game board and display it again.
If the configuration does not satisfy the restrictions, let the user know.
"Indicate" when the puzzle has been solved correctly. In that case, both
checkPuzzle and isComplete would return true. You should also allow
options for resetting the puzzle and displaying the values that can be
placed in a given square.
****************************************************************************
The puzzle will be solved when both checkPuzzle and isComplete return true.
*/